@page "/client"

@using kahan.Hubs
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime

<h1>Client</h1>


@if (client != null) {
    <input type="text" @bind="@Nickname" />
    <button type="button" @onclick="@Register">Register as @Nickname</button>

    <p>@CurrentTime / @Duration</p>
    <button class="d-inline" @onclick="@Play">[PLAY]</button>
    <button class="d-inline" @onclick="@Stop">[STOP]</button>
    <button class="d-inline" @onclick="@(() => AddTime(-30))">[-30s]</button>
    <button class="d-inline" @onclick="@(() => AddTime(+30))">[+30s]</button>
}

@code {
    public string Nickname {
        get => client.Info.Nickname;
        set => client.Info.Nickname = value;
    }

    public string CurrentTime => ToHHMMSS((int)_current);
    public string Duration => ToHHMMSS((int)_duration);

    private float _current {
        get => client.Info.Current;
        set => client.Info.Current = value;
    }

    private float _duration {
        get => client.Info.Duration;
        set => client.Info.Duration = value;
    }

    PlayerClient client;

    async Task Register() {
        await client.Register();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (client != null) return;
        var url = navigationManager.BaseUri;
        client = new PlayerClient(url);
        client.OnInfoUpdated += async info => {
            client.Info.Nickname = info.Nickname;
            if (client.Info.SongId != info.SongId) {
                await LoadVideo(info.SongId);
                client.Info.SongId = info.SongId;
            }
            if (client.Info.IsPlaying != info.IsPlaying) {
                if (info.IsPlaying) {
                    await JSRuntime.InvokeVoidAsync("player.playVideo");
                } else {
                    await JSRuntime.InvokeVoidAsync("player.pauseVideo");
                }
                client.Info.IsPlaying = info.IsPlaying;
            }
            StateHasChanged();
        };

        await client.StartAsync();
        StateHasChanged();

        new System.Threading.Timer(async _ => {
            _current = await JSRuntime.InvokeAsync<float>("getPlayerCurrentTime");
            _duration = await JSRuntime.InvokeAsync<float>("getPlayerDuration");
            await InvokeAsync(StateHasChanged);
        }, null, 0, 100);

        new System.Threading.Timer(async _ => {
            await client.UpdateInfo();
        }, null, 0, 1000);
    }

    async Task LoadVideo(string id) {
        client.Info.SongId = id;
        await JSRuntime.InvokeVoidAsync("loadVideo", id);
    }

    async Task Play() {
        await JSRuntime.InvokeVoidAsync("player.playVideo");
    }

    async Task Stop() {
        await JSRuntime.InvokeVoidAsync("player.stopVideo");
    }

    async Task AddTime(float delta) {
        await JSRuntime.InvokeVoidAsync("addTime", delta);
    }

    string ToHHMMSS(int span) {
        return $"{span / 3600:00}:{span % 3600 / 60:00}:{span % 60:00}";
    }
}