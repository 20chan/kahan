@page "/admin"

@using kahan.Hubs
@inject NavigationManager navigationManager

<h1>Admin</h1>

@if (clients == null) {
    <p>
        <em>Loading...</em>
    </p>
} else {
    <button @onclick="@client.RequestAllPlayerInfo">REFRESH</button>
    <table class="table">
        <thead>
        <tr>
            <th>id</th>
            <th>nickname</th>
            <th>song id</th>
            <th>isplaying</th>
            <th>time</th>
            <th>UPDATE</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var p in clients) {
            <tr>
                <td>@p.Key</td>
                <td><input @bind="@p.Value.Nickname" /></td>
                <td><input @bind="@p.Value.SongId" /></td>
                <td><button @onclick="@(() => p.Value.IsPlaying = !p.Value.IsPlaying)">@(p.Value.IsPlaying ? "Playing" : "Paused")</button></td>
                <td>@p.Value.Current.ToString("0") / @p.Value.Duration.ToString("0")</td>
                <td><button @onclick="@(async () => await UpdatePlayerInfo(p.Key))">UPDATE!</button></td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    AdminClient client;
    Dictionary<string, PlayerInfo> clients;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (client != null) return;
        clients = new Dictionary<string, PlayerInfo>();

        var url = navigationManager.BaseUri;
        client = new AdminClient(url);

        client.OnAllPlayerInfoUpdate += c => {
            clients = c;
            StateHasChanged();
        };

        await client.StartAsync();
        await client.RequestAllPlayerInfo();
        StateHasChanged();
    }

    async Task UpdatePlayerInfo(string id) {
        clients[id].Current = 0;
        clients[id].Duration = 0;
        await client.UploadPlayerInfo(id, clients[id]);
    }
}